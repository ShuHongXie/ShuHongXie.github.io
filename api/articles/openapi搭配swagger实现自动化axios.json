{"title":"openapi搭配swagger实现自动化axios和TS结构生成","uid":"a5e1de8bcca72c1338dc7ea35c5a612c","slug":"openapi搭配swagger实现自动化axios","date":"2024-09-19T16:00:00.000Z","updated":"2025-01-10T03:45:39.033Z","comments":true,"path":"api/articles/openapi搭配swagger实现自动化axios.json","keywords":"谢小谢的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/202501101143898.png","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>自从 vue3 版本推出之后，typescript 就进入了众多 vue 选手的视野，但是使用 axios 来请求时，往往会出现返回的结构体需要专门定义，且旧的 axios 还需要根据新项目来花大量时间来定义和改造 typescript 返回结构体，这让我们团队的同事头疼不已，我做为团队组长，有必要解决这个问题。</p>\n<h3 id=\"解决问题的方案：Hey-API\"><a href=\"#解决问题的方案：Hey-API\" class=\"headerlink\" title=\"解决问题的方案：Hey API\"></a>解决问题的方案：Hey API</h3><p>Hey API 是 OpenAPI 到 TypeScript 的 codegen，我们团队使用的 swagger 文档遵循的就是 openapi 规范，Hey API 和 swagger 文档相结合可以使用 axios 配置和返回结构体的自动生成，下面我使用公司的后台管理系统来演示下改造方案</p>\n<h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add @hey-api/client-axios &amp;&amp; pnpm add @hey-api/openapi-ts -D</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"策略-1：axios-实例配置自动生成\"><a href=\"#策略-1：axios-实例配置自动生成\" class=\"headerlink\" title=\"策略 1：axios 实例配置自动生成\"></a>策略 1：axios 实例配置自动生成</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.项目根目录增加配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@hey-api/openapi-ts&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">client</span>: <span class=\"string\">&quot;@hey-api/client-axios&quot;</span>, <span class=\"comment\">// 所使用类型包</span></span><br><span class=\"line\">  <span class=\"attr\">input</span>: <span class=\"string\">&quot;http://127.0.0.1:3000/api-json&quot;</span>, <span class=\"comment\">// swagger文档地址</span></span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">format</span>: <span class=\"string\">&quot;prettier&quot;</span>, <span class=\"comment\">// 格式化策略</span></span><br><span class=\"line\">    <span class=\"attr\">lint</span>: <span class=\"string\">&quot;eslint&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;./src/client&quot;</span>, <span class=\"comment\">// 输出地址</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">types</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">dates</span>: <span class=\"string\">&quot;types+transform&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">enums</span>: <span class=\"string\">&quot;javascript&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.package.json配置</span></span><br><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;openapi-ts&quot;</span>: <span class=\"string\">&quot;openapi-ts&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3.命令执行</span></span><br><span class=\"line\">pnpm run openapi-ts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文件生成\"><a href=\"#文件生成\" class=\"headerlink\" title=\"文件生成\"></a>文件生成</h3><p>执行步骤 3 后会生成 client 文件夹</p>\n<p><img src=\"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/20250110113100.png\"></p>\n<p>service.gen.ts 里面包含了所有生成的接口文档方法, 下面是里面自动生成的范例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 获取所有员工</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> findAllEmployee&lt;<span class=\"title class_\">ThrowOnError</span> <span class=\"keyword\">extends</span> boolean = <span class=\"literal\">false</span>&gt;(options?: <span class=\"title class_\">Options</span>&lt;unknown, <span class=\"title class_\">ThrowOnError</span>&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (options?.<span class=\"property\">client</span> ?? client).<span class=\"property\">get</span>&lt;</span><br><span class=\"line\">    <span class=\"title class_\">FindAllEmployeeResponse</span>,</span><br><span class=\"line\">    <span class=\"title class_\">FindAllEmployeeError</span>,</span><br><span class=\"line\">    <span class=\"title class_\">ThrowOnError</span></span><br><span class=\"line\">  &gt;(&#123;</span><br><span class=\"line\">    ...options,</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/findAllEmployee&#x27;</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"增加-axios-拦截器\"><a href=\"#增加-axios-拦截器\" class=\"headerlink\" title=\"增加 axios 拦截器\"></a>增加 axios 拦截器</h3><p>创建 config.ts，引入配置文件，初始化拦截器</p>\n<p><img src=\"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/20250110113101.png\"></p>\n<h3 id=\"axios-拦截器方法调用生效\"><a href=\"#axios-拦截器方法调用生效\" class=\"headerlink\" title=\"axios 拦截器方法调用生效\"></a>axios 拦截器方法调用生效</h3><p><img src=\"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/20250110113411.png\"></p>\n<p><strong>这些步骤下来，通过自动生成的结构体和 axios 方法，此后将不再需要自己写 axios 的配置方法和返回的结构体，大大提高团队开发小绿绿</strong></p>\n<p>参考链接：<a href=\"https://heyapi.dev/\">Hey API 官网</a></p>\n","feature":true,"text":"前言自从 vue3 版本推出之后，typescript 就进入了众多 vue 选手的视野，但是使用 axios 来请求时，往往会出现返回的结构体需要专门定义，且...","permalink":"/post/openapi搭配swagger实现自动化axios","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"经验","slug":"经验","count":7,"path":"api/categories/经验.json"}],"tags":[{"name":"axios","slug":"axios","count":1,"path":"api/tags/axios.json"},{"name":"openapi","slug":"openapi","count":1,"path":"api/tags/openapi.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E6%A1%88%EF%BC%9AHey-API\"><span class=\"toc-text\">解决问题的方案：Hey API</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E8%B5%96%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">依赖安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AD%96%E7%95%A5-1%EF%BC%9Aaxios-%E5%AE%9E%E4%BE%8B%E9%85%8D%E7%BD%AE%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90\"><span class=\"toc-text\">策略 1：axios 实例配置自动生成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90\"><span class=\"toc-text\">文件生成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A2%9E%E5%8A%A0-axios-%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">增加 axios 拦截器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#axios-%E6%8B%A6%E6%88%AA%E5%99%A8%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E7%94%9F%E6%95%88\"><span class=\"toc-text\">axios 拦截器方法调用生效</span></a></li></ol>","author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"SSE技术和websocket","uid":"7a8ea0bc07f9bbaa57fab7575f0fd41d","slug":"SSE和websocket","date":"2024-04-13T16:00:00.000Z","updated":"2025-01-10T02:38:45.427Z","comments":true,"path":"api/articles/SSE和websocket.json","keywords":"谢小谢的博客，前端开发，Vue，Node.js","cover":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/202501101036873.png","text":"前言随着 chatgpt3，4 版本的推出，AI 应用的崛起态势已非常明显，当我看到 AI 应用回答我提问的时候，我非常好奇 AI 应用是如何做到不卡的，毕竟有...","permalink":"/post/SSE和websocket","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"总结","slug":"总结","count":2,"path":"api/categories/总结.json"}],"tags":[{"name":"http","slug":"http","count":5,"path":"api/tags/http.json"},{"name":"AI","slug":"AI","count":1,"path":"api/tags/AI.json"}],"author":{"name":"谢小谢","slug":"blog-author","avatar":"https://blog-1300014307.cos.ap-guangzhou.myqcloud.com/logo24.png","link":"/","description":"Love Music, love life","socials":{"github":"https://github.com/ShuHongXie","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}